{"remainingRequest":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\babel-loader\\lib\\index.js!D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\New folder\\vue-argon-design-system\\src\\components\\BasePagination.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\New folder\\vue-argon-design-system\\src\\components\\BasePagination.vue","mtime":1648190007538},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\babel.config.js","mtime":1648190007451},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648104036232},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\babel-loader\\lib\\index.js","mtime":1648103981216},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648104036232},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\vue-loader\\lib\\index.js","mtime":1648104044860}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"base-pagination\",\n  props: {\n    pageCount: {\n      type: Number,\n      default: 0,\n      description: \"Pagination page count. This should be specified in combination with perPage\"\n    },\n    perPage: {\n      type: Number,\n      default: 10,\n      description: \"Pagination per page. Should be specified with total or pageCount\"\n    },\n    total: {\n      type: Number,\n      default: 0,\n      description: \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\n    },\n    value: {\n      type: Number,\n      default: 1,\n      description: \"Pagination value\"\n    },\n    size: {\n      type: String,\n      default: \"\",\n      description: \"Pagination size\"\n    },\n    align: {\n      type: String,\n      default: \"\",\n      description: \"Pagination alignment (e.g center|start|end)\"\n    }\n  },\n  computed: {\n    totalPages: function totalPages() {\n      if (this.pageCount > 0) return this.pageCount;\n\n      if (this.total > 0) {\n        return Math.ceil(this.total / this.perPage);\n      }\n\n      return 1;\n    },\n    pagesToDisplay: function pagesToDisplay() {\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\n        return this.totalPages;\n      }\n\n      return this.defaultPagesToDisplay;\n    },\n    minPage: function minPage() {\n      if (this.value >= this.pagesToDisplay) {\n        var pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        var newMaxPage = pagesToAdd + this.value;\n\n        if (newMaxPage > this.totalPages) {\n          return this.totalPages - this.pagesToDisplay + 1;\n        }\n\n        return this.value - pagesToAdd;\n      } else {\n        return 1;\n      }\n    },\n    maxPage: function maxPage() {\n      if (this.value >= this.pagesToDisplay) {\n        var pagesToAdd = Math.floor(this.pagesToDisplay / 2);\n        var newMaxPage = pagesToAdd + this.value;\n\n        if (newMaxPage < this.totalPages) {\n          return newMaxPage;\n        } else {\n          return this.totalPages;\n        }\n      } else {\n        return this.pagesToDisplay;\n      }\n    }\n  },\n  data: function data() {\n    return {\n      defaultPagesToDisplay: 5\n    };\n  },\n  methods: {\n    range: function range(min, max) {\n      var arr = [];\n\n      for (var i = min; i <= max; i++) {\n        arr.push(i);\n      }\n\n      return arr;\n    },\n    changePage: function changePage(item) {\n      this.$emit(\"input\", item);\n    },\n    nextPage: function nextPage() {\n      if (this.value < this.totalPages) {\n        this.$emit(\"input\", this.value + 1);\n      }\n    },\n    prevPage: function prevPage() {\n      if (this.value > 1) {\n        this.$emit(\"input\", this.value - 1);\n      }\n    }\n  },\n  watch: {\n    perPage: function perPage() {\n      this.$emit(\"input\", 1);\n    },\n    total: function total() {\n      this.$emit(\"input\", 1);\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAoBA;AACAA,yBADA;AAEAC;AACAC;AACAC,kBADA;AAEAC,gBAFA;AAGAC,mBACA;AAJA,KADA;AAOAC;AACAH,kBADA;AAEAC,iBAFA;AAGAC,mBACA;AAJA,KAPA;AAaAE;AACAJ,kBADA;AAEAC,gBAFA;AAGAC,mBACA;AAJA,KAbA;AAmBAG;AACAL,kBADA;AAEAC,gBAFA;AAGAC;AAHA,KAnBA;AAwBAI;AACAN,kBADA;AAEAC,iBAFA;AAGAC;AAHA,KAxBA;AA6BAK;AACAP,kBADA;AAEAC,iBAFA;AAGAC;AAHA;AA7BA,GAFA;AAqCAM;AACAC,cADA,wBACA;AACA;;AACA;AACA;AACA;;AACA;AACA,KAPA;AAQAC,kBARA,4BAQA;AACA;AACA;AACA;;AACA;AACA,KAbA;AAcAC,WAdA,qBAcA;AACA;AACA;AACA;;AACA;AACA;AACA;;AACA;AACA,OAPA,MAOA;AACA;AACA;AACA,KAzBA;AA0BAC,WA1BA,qBA0BA;AACA;AACA;AACA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA,OARA,MAQA;AACA;AACA;AACA;AAtCA,GArCA;AA6EAC,MA7EA,kBA6EA;AACA;AACAC;AADA;AAGA,GAjFA;AAkFAC;AACAC,SADA,iBACAC,GADA,EACAC,GADA,EACA;AACA;;AACA;AACAC;AACA;;AACA;AACA,KAPA;AAQAC,cARA,sBAQAC,IARA,EAQA;AACA;AACA,KAVA;AAWAC,YAXA,sBAWA;AACA;AACA;AACA;AACA,KAfA;AAgBAC,YAhBA,sBAgBA;AACA;AACA;AACA;AACA;AApBA,GAlFA;AAwGAC;AACArB,WADA,qBACA;AACA;AACA,KAHA;AAIAC,SAJA,mBAIA;AACA;AACA;AANA;AAxGA","names":["name","props","pageCount","type","default","description","perPage","total","value","size","align","computed","totalPages","pagesToDisplay","minPage","maxPage","data","defaultPagesToDisplay","methods","range","min","max","arr","changePage","item","nextPage","prevPage","watch"],"sourceRoot":"src/components","sources":["BasePagination.vue"],"sourcesContent":["<template>\r\n  <ul class=\"pagination\" :class=\"[size && `pagination-${size}`, align && `justify-content-${align}`]\">\r\n    <li class=\"page-item prev-page\" :class=\"{disabled: value === 1}\">\r\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-left\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n    <li class=\"page-item\" :class=\"{active: value === item}\"\r\n        :key=\"item\"\r\n        v-for=\"item in range(minPage, maxPage)\">\r\n      <a class=\"page-link\" @click=\"changePage(item)\">{{item}}</a>\r\n    </li>\r\n    <li class=\"page-item next-page\" :class=\"{disabled: value === totalPages}\">\r\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\r\n        <span aria-hidden=\"true\"><i class=\"fa fa-angle-right\" aria-hidden=\"true\"></i></span>\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"base-pagination\",\r\n  props: {\r\n    pageCount: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Pagination page count. This should be specified in combination with perPage\"\r\n    },\r\n    perPage: {\r\n      type: Number,\r\n      default: 10,\r\n      description:\r\n        \"Pagination per page. Should be specified with total or pageCount\"\r\n    },\r\n    total: {\r\n      type: Number,\r\n      default: 0,\r\n      description:\r\n        \"Can be specified instead of pageCount. The page count in this case will be total/perPage\"\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 1,\r\n      description: \"Pagination value\"\r\n    },\r\n    size: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination size\"\r\n    },\r\n    align: {\r\n      type: String,\r\n      default: \"\",\r\n      description: \"Pagination alignment (e.g center|start|end)\"\r\n    }\r\n  },\r\n  computed: {\r\n    totalPages() {\r\n      if (this.pageCount > 0) return this.pageCount;\r\n      if (this.total > 0) {\r\n        return Math.ceil(this.total / this.perPage);\r\n      }\r\n      return 1;\r\n    },\r\n    pagesToDisplay() {\r\n      if (this.totalPages > 0 && this.totalPages < this.defaultPagesToDisplay) {\r\n        return this.totalPages;\r\n      }\r\n      return this.defaultPagesToDisplay;\r\n    },\r\n    minPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage > this.totalPages) {\r\n          return this.totalPages - this.pagesToDisplay + 1;\r\n        }\r\n        return this.value - pagesToAdd;\r\n      } else {\r\n        return 1;\r\n      }\r\n    },\r\n    maxPage() {\r\n      if (this.value >= this.pagesToDisplay) {\r\n        const pagesToAdd = Math.floor(this.pagesToDisplay / 2);\r\n        const newMaxPage = pagesToAdd + this.value;\r\n        if (newMaxPage < this.totalPages) {\r\n          return newMaxPage;\r\n        } else {\r\n          return this.totalPages;\r\n        }\r\n      } else {\r\n        return this.pagesToDisplay;\r\n      }\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      defaultPagesToDisplay: 5\r\n    };\r\n  },\r\n  methods: {\r\n    range(min, max) {\r\n      let arr = [];\r\n      for (let i = min; i <= max; i++) {\r\n        arr.push(i);\r\n      }\r\n      return arr;\r\n    },\r\n    changePage(item) {\r\n      this.$emit(\"input\", item);\r\n    },\r\n    nextPage() {\r\n      if (this.value < this.totalPages) {\r\n        this.$emit(\"input\", this.value + 1);\r\n      }\r\n    },\r\n    prevPage() {\r\n      if (this.value > 1) {\r\n        this.$emit(\"input\", this.value - 1);\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    perPage() {\r\n      this.$emit(\"input\", 1);\r\n    },\r\n    total() {\r\n      this.$emit(\"input\", 1);\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}