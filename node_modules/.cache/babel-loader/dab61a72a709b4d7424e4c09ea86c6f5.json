{"remainingRequest":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\babel-loader\\lib\\index.js!D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\vue\\New folder\\vue-argon-design-system\\src\\components\\BaseCheckbox.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\vue\\New folder\\vue-argon-design-system\\src\\components\\BaseCheckbox.vue","mtime":1648190007536},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\babel.config.js","mtime":1648190007451},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648104036232},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\babel-loader\\lib\\index.js","mtime":1648103981216},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648104036232},{"path":"D:\\vue\\New folder\\vue-argon-design-system\\node_modules\\vue-loader\\lib\\index.js","mtime":1648104044860}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { randomString } from \"./stringUtils\";\nexport default {\n  name: \"base-checkbox\",\n  model: {\n    prop: \"checked\"\n  },\n  props: {\n    checked: {\n      type: [Array, Boolean],\n      description: \"Whether checkbox is checked\"\n    },\n    disabled: {\n      type: Boolean,\n      description: \"Whether checkbox is disabled\"\n    },\n    inline: {\n      type: Boolean,\n      description: \"Whether checkbox is inline\"\n    }\n  },\n  data: function data() {\n    return {\n      cbId: \"\",\n      touched: false\n    };\n  },\n  computed: {\n    model: {\n      get: function get() {\n        return this.checked;\n      },\n      set: function set(check) {\n        if (!this.touched) {\n          this.touched = true;\n        }\n\n        this.$emit(\"input\", check);\n      }\n    },\n    inlineClass: function inlineClass() {\n      if (this.inline) {\n        return \"form-check-inline\";\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.cbId = randomString();\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;AAgBA;AAEA;AACAA,uBADA;AAEAC;AACAC;AADA,GAFA;AAKAC;AACAC;AACAC,4BADA;AAEAC;AAFA,KADA;AAKAC;AACAF,mBADA;AAEAC;AAFA,KALA;AASAE;AACAH,mBADA;AAEAC;AAFA;AATA,GALA;AAmBAG,MAnBA,kBAmBA;AACA;AACAC,cADA;AAEAC;AAFA;AAIA,GAxBA;AAyBAC;AACAX;AACAY,SADA,iBACA;AACA;AACA,OAHA;AAIAC,SAJA,eAIAC,KAJA,EAIA;AACA;AACA;AACA;;AACA;AACA;AATA,KADA;AAYAC,eAZA,yBAYA;AACA;AACA;AACA;AACA;AAhBA,GAzBA;AA2CAC,SA3CA,qBA2CA;AACA;AACA;AA7CA","names":["name","model","prop","props","checked","type","description","disabled","inline","data","cbId","touched","computed","get","set","check","inlineClass","mounted"],"sourceRoot":"src/components","sources":["BaseCheckbox.vue"],"sourcesContent":["<template>\r\n  <div class=\"custom-control custom-checkbox\"\r\n       :class=\"[{disabled: disabled}, inlineClass]\">\r\n    <input :id=\"cbId\"\r\n           class=\"custom-control-input\"\r\n           type=\"checkbox\"\r\n           :disabled=\"disabled\"\r\n           v-model=\"model\"/>\r\n    <label :for=\"cbId\" class=\"custom-control-label\">\r\n      <slot>\r\n        <span v-if=\"inline\">&nbsp;</span>\r\n      </slot>\r\n    </label>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { randomString } from \"./stringUtils\";\r\n\r\nexport default {\r\n  name: \"base-checkbox\",\r\n  model: {\r\n    prop: \"checked\"\r\n  },\r\n  props: {\r\n    checked: {\r\n      type: [Array, Boolean],\r\n      description: \"Whether checkbox is checked\"\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is disabled\"\r\n    },\r\n    inline: {\r\n      type: Boolean,\r\n      description: \"Whether checkbox is inline\"\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      cbId: \"\",\r\n      touched: false\r\n    };\r\n  },\r\n  computed: {\r\n    model: {\r\n      get() {\r\n        return this.checked;\r\n      },\r\n      set(check) {\r\n        if (!this.touched) {\r\n          this.touched = true;\r\n        }\r\n        this.$emit(\"input\", check);\r\n      }\r\n    },\r\n    inlineClass() {\r\n      if (this.inline) {\r\n        return `form-check-inline`;\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.cbId = randomString()\r\n  }\r\n};\r\n</script>\r\n"]}]}